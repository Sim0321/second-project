{
  "compilerOptions": {
    // 컴파일된 JavaScript 코드의 대상 ECMAScript 버전을 지정
    "target": "es5",
    // 컴파일러가 코드를 컴파일할 때 사용할 라이브러리를 지정합니다. 여기서는 DOM과 DOM 이터러블 및 ESNext를 사용
    "lib": ["dom", "dom.iterable", "esnext"],
    // JavaScript 파일도 컴파일할 수 있도록 허용
    "allowJs": true,
    // 라이브러리의 선언 파일에 대한 타입 체크를 건너뛰도록 설정
    "skipLibCheck": true,
    // CommonJS 모듈 및 ES 모듈 사이에서의 상호 운용성을 위한 옵션
    "esModuleInterop": true,
    // ES 모듈을 CommonJS 모듈처럼 가져올 때에도 default 멤버를 사용할 수 있도록 허용
    "allowSyntheticDefaultImports": true,
    // 엄격한 타입 체크 옵션을 활성화합니다. 타입 관련 오류를 엄격하게 검출
    "strict": true,
    // 파일 이름의 대소문자 일관성을 검사하여 파일 시스템이 대소문자를 구별하는 경우 문제를 방지
    "forceConsistentCasingInFileNames": true,
    // switch 문에서 case 블록 내에 break가 없으면 경고를 발생
    "noFallthroughCasesInSwitch": true,
    // 모듈 시스템을 지정합니다. 여기서는 ESNext 모듈 시스템을 사용
    "module": "esnext",
    // 모듈을 해결하는 방법을 지정합니다. 여기서는 Node.js 스타일의 모듈 해결 방식을 사용
    "moduleResolution": "node",
    // .json 확장자를 가진 모듈을 해석할 수 있도록 허용
    "resolveJsonModule": true,
    // 각 파일을 별도의 모듈로 취급하여 모듈 간의 영향을 줄입니다. 각 파일은 독립적인 컴파일 단위로 취급
    "isolatedModules": true,
    // 컴파일 후 JavaScript 파일을 생성하지 않도록 설정합니다. 오로지 타입 체크만 진행
    "noEmit": true,
    // JSX 문법의 사용 방식을 지정합니다. React에서는 "react-jsx"로 설정하여 JSX 문법을 지원
    "jsx": "react-jsx"
  },
  // 컴파일할 소스 코드의 디렉토리 경로를 지정합니다. 여기서는 "src" 디렉토리 내의 파일들이 컴파일 대상이 됩니다.
  "include": ["src"]
}
